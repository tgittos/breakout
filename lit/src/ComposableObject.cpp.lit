== Composable Object ==
See header for details on what this object is.
The comments here will concern implementation details.

== Add feature ==
-
void ComposableObject::AddFeature(ComponentFeature* feature) {
  _componentFeatures.push_back(feature);
}
-

== Constructor ==
Initializes the map so child classes can add features.
Initializes it onto the stack, so it should go out of
memory when the object is destroyed?
-
ComposableObject::ComposableObject() {
  std::list<ComponentFeature*> _componentFeatures;
}
-

== Destructor ==
Deletes each copoment feature.
-
ComposableObject::~ComposableObject() {
/*
  std::map<const char*, ComponentFeature*>::iterator itr;
  for (itr = _componentFeatures.begin(); itr != _componentFeatures.end(); ++itr) {
    delete itr->second;
  }
*/
}
-

== Includes ==
-
#include <cassert>
#include "ComposableObject.hpp"
-

== Wrapper ==
-
Includes.

Constructor.

Destructor.

Add feature.
-

== @ComposableObject.cpp ==
Wrapper.
