== Composable Object ==
See header for all details.

== Add feature ==
-
void ComposableObject::AddFeature(const char* identifier, ComponentFeature* feature) {
  _componentFeatures.insert(std::pair<const char*, ComponentFeature*>(identifier, feature));
}
-

== Has feature? ==
-
bool ComposableObject::HasFeature(const char* identifier) {
  std::map<const char*, ComponentFeature*>::iterator itr = _componentFeatures.find(identifier);
  return _componentFeatures.end() != itr;
}
-

== Get feature ==
-
ComponentFeature* ComposableObject::GetFeature(const char* identifier) {
  std::map<const char*, ComponentFeature*>::iterator itr = _componentFeatures.find(identifier);
  if(_componentFeatures.end() == itr)
  {
    return NULL;
  } else {
    return itr->second;
  }
}
-

== Constructor ==
Initializes the map so child classes can add features.
Initializes it onto the stack, so it should go out of
memory when the object is destroyed?
-
ComposableObject::ComposableObject() {
  std::map<const char*, ComponentFeature*> _componentFeatures = std::map<const char*, ComponentFeature*>(); 
}
-

== Destructor ==
Deletes the map that holds ComponentFeatures.
-
ComposableObject::~ComposableObject() {
}
-

== Includes ==
-
#include "ComposableObject.hpp"
-

== Wrapper ==
-
Includes.

Constructor.

Destructor.

Add feature.

Has feature?.

Get feature.
-

== @ComposableObject.cpp ==
Wrapper.
