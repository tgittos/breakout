== Event manager ==
See header for details on what this object is.
The comments here will concern implementation details.

== Get instance ==
Snazzy way of creating a singleton that will be cleaned
up when out of scope, without needing to manually destroy it.
Creates the instance on the heap!
http://stackoverflow.com/questions/270947/can-any-one-provide-me-a-sample-of-singleton-in-c/271104#271104
-
EventManager& EventManager::GetInstance() {
  static EventManager instance;
  return instance;
}
-

== Subscribe ==
This uses member function pointers. Oh boy.
-
void EventManager::Subscribe(const std::string eventIdentifier, EventManager::Handler handler) {
  std::list<EventManager::Handler>* subscribers = GetSubscribers(eventIdentifier);
  if (NULL == subscribers) {
    subscribers = new std::list<EventManager::Handler>;
    _eventSubscriptions.insert(std::pair<const std::string, std::list<EventManager::Handler>*>(eventIdentifier, subscribers));
  }
  subscribers->push_back(handler);
}
-

== Subscriber count ==
-
int EventManager::SubscriberCount(const std::string eventIdentifier) {
  std::map<const std::string, std::list<EventManager::Handler>*>::iterator itr = _eventSubscriptions.find(eventIdentifier);
  if(_eventSubscriptions.end() == itr)
  {
    return 0;
  } else {
    return itr->second->size();
  }
}
-

== Get subscribers ==
-
std::list<EventManager::Handler>* EventManager::GetSubscribers(const std::string eventIdentifier) {
  std::map<const std::string, std::list<EventManager::Handler>*>::iterator itr = _eventSubscriptions.find(eventIdentifier);
  if(_eventSubscriptions.end() == itr)
  {
    return NULL;
  } else {
    return itr->second;
  }
}
-

== Dispatch ==
Because GetSubscribers returns null if there are no subscribers,
we need to check first if it's null, and if it is, do nothing.
-
void EventManager::Dispatch(const std::string eventIdentifier, void* data) {
  std::list<EventManager::Handler>* subscribersPtr = GetSubscribers(eventIdentifier);
  if (NULL != subscribersPtr) {
    std::list<EventManager::Handler> subscribers = *subscribersPtr;
    for(std::list<EventManager::Handler>::iterator itr = subscribers.begin(); itr != subscribers.end(); ++itr) {
      EventManager::Handler handler = *itr;
      if (!handler.isStatic) {
        (handler.object->*handler.handlerPointer)(data);
      } else {
        (handler.staticHandlerPointer)(data);
      }
    }
  }
}
-

== Constructor ==
Instantiate the subscription map. The map is keyed
from the event identifier, and each value is a pointer
to the member function that will handle the event.
-
EventManager::EventManager() {
  std::map<const std::string, std::list<Handler>*> _eventSubscriptions = std::map<const std::string, std::list<Handler>*>();
}
-

== Copy constructor ==
Not implemented due to the fact this is a singleton.
-
EventManager(EventManager const&);d
-

== Assignment operator ==
Not implemented due to the fact this is a singleton.
-
void operator=(EventManager const&);
-

== Includes ==
-
#include "EventManager.hpp"
-

== Wrapper ==
-
Includes.

Get instance.

Subscribe.

Subscriber count.

Get subscribers.

Dispatch.

Constructor.
-

== @EventManager.cpp ==
Wrapper.
