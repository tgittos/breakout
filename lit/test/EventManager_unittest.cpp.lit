== Event Manager Unit Tests ==
Tests that the EventManager class correctly dispatches
events to event subscribers.

== Event manager initializes subscription list on construct ==
-
TEST(EventManager, InitializeList) {
  ASSERT_EQ(0, EventManager::GetInstance().SubscriberCount("MockEvent"));
}
-

== Event subscription, dispatching and receiving works as intended ==
-
TEST(EventManager, EventDispatch) {
  MockEventSubscriber mes = MockEventSubscriber();
  ASSERT_EQ(0, mes.MyInteger);
  EventManager::GetInstance().Dispatch("MockEvent", NULL);
  ASSERT_EQ(1, mes.MyInteger);
}
-

== Event subscription notifications don't leak into other subscriptions ==
-
TEST(EventManager, NoLeakySubscriptions) {
  MockEventSubscriber mes = MockEventSubscriber();
  ASSERT_EQ(0, mes.MyInteger);
  EventManager::GetInstance().Dispatch("MockEvent", NULL);
  ASSERT_EQ(1, mes.MyInteger);
  EventManager::GetInstance().Dispatch("MockEvent2", NULL);
  ASSERT_EQ(2, mes.MyInteger);
}
-

== Can subscribe to event using a static handler ==
-
TEST(EventManager, StaticMethodHandler) {
  ASSERT_EQ(0, MockEventSubscriber::MyStaticInteger);
  EventManager::GetInstance().Dispatch("MockEvent3", NULL);
  ASSERT_EQ(-1, MockEventSubscriber::MyStaticInteger);
}
-

== Fake event subscriber for tests ==
-
class MockEventSubscriber : public EventHandler {
  public:
  int MyInteger;
  static int MyStaticInteger;
  MockEventSubscriber() {
    MyInteger = 0;
    EventManager::GetInstance().Subscribe("MockEvent", EventManager::Handler(this, static_cast<void (EventHandler::*)(void*)>(&MockEventSubscriber::MockEventHandler)));

    EventManager::GetInstance().Subscribe("MockEvent2", EventManager::Handler(this, static_cast<void (EventHandler::*)(void*)>(&MockEventSubscriber::MockEvent2Handler)));

    EventManager::GetInstance().Subscribe("MockEvent3", EventManager::Handler(&MockEvent3Handler));
  };
  ~MockEventSubscriber(){};
  void MockEventHandler(void* data) {
    MyInteger = 1;
  };
  void MockEvent2Handler(void* data) {
    MyInteger++;
  };
  static void MockEvent3Handler(void* data) {
    MyStaticInteger = -1;
  };
};
int MockEventSubscriber::MyStaticInteger = 0;
-

== Includes ==
-
#include "gtest/gtest.h"
#include "EventManager.hpp"
-

== Wrapper ==
-
Includes.

Fake event subscriber for tests.

Event manager initializes subscription list on construct.

Event subscription, dispatching and receiving works as intended.

Event subscription notifications don't leak into other subscriptions.

Can subscribe to event using a static handler.
-

== @EventManager_unittest.cpp ==
Wrapper.