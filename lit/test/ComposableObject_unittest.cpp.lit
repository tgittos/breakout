== Has feature will return true when feature present ==
This uses a fake composable object and a fake concrete 
component feature declared in this test file. See the 
end of this document for more details.
-
TEST(ComposableObject, HasFeatureReturnsTrue) {
  ConcreteComponentFeature* ccf = new ConcreteComponentFeature();
  ConcreteComposableObject co = ConcreteComposableObject(ccf);
  ASSERT_TRUE(co.HasFeature(ccf->GetIdentifier()));
}
-

== Has feature will return false when no feature present ==
-
TEST(ComposableObject, HasFeatureReturnsFalse) {
  ConcreteComponentFeature* ccf = new ConcreteComponentFeature();
  ConcreteComposableObject co = ConcreteComposableObject(ccf);
  ASSERT_FALSE(co.HasFeature("FoobarComponentFeature"));
}
-

== Get feature will return a feature when it's present ==
-
TEST(ComposableObject, GetValidFeature) {
  ConcreteComponentFeature* ccf = new ConcreteComponentFeature();
  ConcreteComposableObject co = ConcreteComposableObject(ccf);
  ASSERT_EQ(ccf, co.GetFeature("ConcreteComponentFeature"));
}
-

== Get feature will return null when it's not present ==
-
TEST(ComposableObject, GetInvalidFeature) {
  ConcreteComponentFeature* ccf = new ConcreteComponentFeature();
  ConcreteComposableObject co = ConcreteComposableObject(ccf);
  ASSERT_EQ(NULL, co.GetFeature("FoobarComponentFeature"));
}
-

== Fake concrete composable object for tests ==
This will add the ConcreteComponentFeature as a feature
during construction, using Dependency Injection (DI)
-
class ConcreteComposableObject : public ComposableObject {
  public:
  ConcreteComposableObject(ConcreteComponentFeature* ccf) {
    AddFeature(ccf->GetIdentifier(), ccf);
  }
  ~ConcreteComposableObject() {
    // iterate over features and delete the memory for them
  }
};
-

== Fake concrete component feature for tests ==
-
class ConcreteComponentFeature : public ComponentFeature {
  public:
  virtual const char* GetIdentifier() {
    return "ConcreteComponentFeature";
  }
};
-

== Includes ==
-
#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "ComposableObject.hpp"
#include "ComponentFeature.hpp"
-

== Wrapper ==
-
Includes.

Fake concrete component feature for tests.

Fake concrete composable object for tests.

Has feature will return true when feature present.

Has feature will return false when no feature present.

Get feature will return a feature when it's present.

Get feature will return null when it's not present.
-

== @ComposableObject_unittest.cpp ==
Wrapper.
