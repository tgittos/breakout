== Cannot add a feature twice ==
Because we store features in a list, we need to make
sure we'll get a run time error if we try and add
a feature twice.

I HAVE REMOVED THIS TEST BECAUSE THIS FUNCTIONALY
WOULD UNREASONABLY COMPLICATE THE CODE.
-
TEST(ComposableObject, CannotAddFeatureTwice) {
  ConcreteComponentFeature* ccf = new ConcreteComponentFeature();
  ConcreteComposableObject co = ConcreteComposableObject(ccf);
  ASSERT_EXIT(co.AddConcreteComponentFeature(), ::testing::ExitedWithCode(1), "Cannot add feature twice");
}
-

== Has feature will return true when feature present ==
This uses a fake composable object and a fake concrete 
component feature declared in this test file. See the 
end of this document for more details.
-
TEST(ComposableObject, HasFeatureReturnsTrue) {
  ConcreteComponentFeature* ccf = new ConcreteComponentFeature();
  ConcreteComposableObject co = ConcreteComposableObject(ccf);
  ASSERT_TRUE(co.HasFeature<ConcreteComponentFeature>());
}
-

== Has feature will return false when no feature present ==
-
TEST(ComposableObject, HasFeatureReturnsFalse) {
  ConcreteComposableObject co = ConcreteComposableObject();
  ASSERT_FALSE(co.HasFeature<ConcreteComponentFeature>());
}
-

== Get feature will return a feature when it's present ==
-
TEST(ComposableObject, GetValidFeature) {
  ConcreteComponentFeature* ccf = new ConcreteComponentFeature();
  ConcreteComposableObject co = ConcreteComposableObject(ccf);
  ASSERT_EQ(ccf, co.GetFeature<ConcreteComponentFeature>());
}
-

== Get feature will return null when it's not present ==
-
TEST(ComposableObject, GetInvalidFeature) {
  ConcreteComposableObject co = ConcreteComposableObject();
  ASSERT_EQ(NULL, co.GetFeature<ConcreteComponentFeature>());
}
-

== Fake concrete composable object for tests ==
This will add the ConcreteComponentFeature as a feature
during construction, using Dependency Injection (DI)
-
class ConcreteComposableObject : public ComposableObject {
  public:
  ConcreteComposableObject(ConcreteComponentFeature* ccf = NULL) {
    if(NULL != ccf) {
      AddFeature(ccf);
    }
  }
  void AddConcreteComponentFeature() {
    return AddFeature(new ConcreteComponentFeature());
  }
  ~ConcreteComposableObject() {
    // iterate over features and delete the memory for them
  }
};
-

== Fake concrete component feature for tests ==
-
class ConcreteComponentFeature : public ComponentFeature {
};
-

== Includes ==
-
#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "ComposableObject.hpp"
#include "ComponentFeature.hpp"
-

== Wrapper ==
-
Includes.

Fake concrete component feature for tests.

Fake concrete composable object for tests.

Has feature will return true when feature present.

Has feature will return false when no feature present.

Get feature will return a feature when it's present.

Get feature will return null when it's not present.
-

== @ComposableObject_unittest.cpp ==
Wrapper.
