== Brick Unit Tests ==
These are unit tests for the Brick class in the game.
They test the required behavior of bricks to ensure
that the logic behind the game is correct.

Each of the tests should be relatively straight
forward, so the documentation on them will not be
as explanatory as the documentation on the code.

== Brick has both Collidable and Dimension features ==
-
TEST(BrickTest, FeatureTest) {
  Brick b = Brick(Brick::UNBREAKABLE);
  ASSERT_TRUE(b.HasFeature<Dimension>());
  ASSERT_TRUE(b.HasFeature<Collidable>());
}
-

== Correct width and height is set on construction ==
-
TEST(BrickTest, WidthHeightSet) {
  Brick b = Brick(Brick::UNBREAKABLE);
  ASSERT_EQ(Brick::BRICK_WIDTH, b.GetFeature<Dimension>()->GetWidth());
  ASSERT_EQ(Brick::BRICK_HEIGHT, b.GetFeature<Dimension>()->GetHeight());
}
-

== Can get score off of brick ==
-
TEST(BrickTest, BrickHasScore) {
  Brick b = Brick(Brick::FIVE_POINTS);
  ASSERT_EQ(5, b.GetPoints());
}
-

== Unbreakable brick has zero score ==
-
TEST(BrickTest, UnbreakableBrickHasNoScore) {
  Brick b = Brick(Brick::UNBREAKABLE);
  ASSERT_EQ(0, b.GetPoints());
}
-

== Unbreakable brick reports itself as thus ==
-
TEST(BrickTest, UnbreakableIsTrue) {
  Brick b = Brick(Brick::UNBREAKABLE);
  ASSERT_TRUE(b.IsUnbreakable());
}
-

== Non-unbreakable brick doesn't report itself as an unbrekable brick ==
-
TEST(BrickTest, UnbreakableIsFalse) {
  Brick b = Brick(Brick::FIVE_POINTS);
  ASSERT_FALSE(b.IsUnbreakable());
}
-

== Includes ==
-
#include "gtest/gtest.h"
#include "Brick.hpp"
#include "Dimension.hpp"
#include "Collidable.hpp"
-

== Wrapper ==
-
Includes.

Brick has both Collidable and Dimension features.

Correct width and height is set on construction.

Can get score off of brick.

Unbreakable brick has zero score.

Unbreakable brick reports itself as thus.

Non-unbreakable brick doesn't report itself as an unbrekable brick.
-

== @Brick_unittest.cpp ==
Wrapper.