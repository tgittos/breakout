== Composable object ==
In order to correctly implement compositional classes, I
need some system for classes to be able to dynamically query
their component features in order to determine if they
support a given action, and then the ability to access that
feature.

Each feature is going to have a unique identifier, and when
that feature is added to a composable object, it's going to
be added to a hash map, hashed by the unique identifier
for the feature.

== Add feature ==
This protected method will allow the object to add a feature
to itself.
-
void AddFeature(ComponentFeature* feature);
-

== Has feature? ==
This public method will allow other objects to query this
one to determine what it supports and what it doesn't.
Due to C++ template funkiness, I have to put the definition
of a templated function in the header, not in the body.
-
template<class T>
bool HasFeature() {
  return NULL != GetFeature<T>();
}
-

== Get feature ==
This public method will allow other objects to access
the features this object supports.
Due to C++ template funkiness, I have to put the definition
of a templated function in the header, not in the body.

The first line is an assert that will verify if the class
passed is a ComponentFeature. If it isn't, the program
will abort.
-
template<class T>
T* GetFeature() {
  T* ptr = NULL;
  for(std::list<ComponentFeature*>::iterator itr = _componentFeatures.begin(); itr != _componentFeatures.end(); ++itr) {
    ptr = dynamic_cast<T*>(*itr);
    if (NULL != ptr) {
      break;
    }
  }
  return ptr;
}
-

== The list ==
The list stores the features by their identifiers
-
std::list<ComponentFeature*> _componentFeatures;
-

== The class ==
-
class ComposableObject {
  public:
  ComposableObject();
  virtual ~ComposableObject();

  Has feature?.

  Get feature.

  Add feature.

  protected:
  The list.
};
-

== Forward declarations ==
Instead of including the whole header when all we need is
a reference, forward declare things we need instead
-
class ComponentFeature;
-

== Includes ==
For those files we can't forward declare, use includes
-
Ubuntu includes.
#include <list>
-

== Ubuntu includes ==
These includes are reuired for building on Ubuntu.
I'm not sure if they're required for all versions of Linux.
-
#include <cstddef>
-

== Include guard ==
-
#ifndef COMPOSABLE_OBJECT_H
#define COMPOSABLE_OBJECT_H

Includes.

Forward declarations.

The class.

#endif
-

== @ComposableObject.hpp ==
Include guard.
