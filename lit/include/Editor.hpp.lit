== Editor class header ==
The editor will allow anyone to create and edit
game levels.

A lot of the rendering code will be shared, so
this will essentially be a container for views
and will act as a controller in a traditional
MVC architecture.

== State enumeration ==
Details on why the editor is state driven can be
found in Game.hpp.lit
-
enum EditorState {
  Uninitialized,
  LeftMouseButtonDown,
  Exiting
};
-

== Editor state variable ==
The current state the editor is in.
-
static EditorState _editorState;
-

== Current brick type ==
-
static Brick::BrickType _currentType;
-

== Window reference variable ==
In addition to the game state variable, we need to hold
a reference to the SFML window
-
static sf::RenderWindow _mainWindow;
-

== Screen width and height ==
-
const static int SCREEN_WIDTH = 1024;
const static int SCREEN_HEIGHT = 768;
-

== Render list ==
Each item that needs to be rendered will be added to
the render list
-
static std::list<SFMLView*> _renderables;
static std::list<Button*> _buttons;
-

== Start the editor ==
-
static void Start();
-

== Exit poller method ==
This method is used inside the class to determine if the
app has been called to shut down.
-
static bool IsExiting();
-

== Editor loop method ==
Start the editor loop.
-
static void EditorLoop();
-

== Load level ==
-
static void LoadLevel(const char* path);
-

== Save level ==
-
static void SaveLevel(const char* path);
-

== New level ==
-
static void NewLevel();
-

== Render buttons ==
-
-

== Exit button handler ==
When the exit button event is dispatched, the editor
needs to take action by listening to the event, and then
setting the state to exiting.
-
static void ExitHandler(void* data);
-

== Delete brick button handler ==
-
static void DeleteBrickHandler(void* data);
-

== Unbreakable brick button handler ==
-
static void UnbreakableBrickHandler(void* data);
-

== One point brick button handler ==
-
static void OnePointBrickHandler(void* data);
-

== Three point brick button handler ==
-
static void ThreePointBrickHandler(void* data);
-

== Five point brick button handler ==
-
static void FivePointBrickHandler(void* data);
-

== Seven point brick button handler ==
-
static void SevenPointBrickHandler(void* data);
-

== Level click handler ==
-
static void LevelClickHandler(int mouseX, int mouseY);
-

== Save handler ==
-
static void SaveHandler(void* data);
-

== Current level ==
-
static Level* _currentLevel;
static SFMLLevelView* _currentLevelView;
-

== The class ==
-
class Editor : public EventHandler {
  public:
  Start the editor.

  Load level.
  Save level.
  New level.

  private:
  State enumeration.
  Screen width and height.

  Editor state variable.
  Current brick type.
  Window reference variable.
  Render list.
  Current level.

  Render buttons.
  Exit poller method.
  Editor loop method.

  Exit button handler.
  Delete brick button handler.
  Unbreakable brick button handler.
  One point brick button handler.
  Three point brick button handler.
  Five point brick button handler.
  Seven point brick button handler.
  Level click handler.
  Save handler.
};
-

== Forward declarations ==
-
class Level;
class SFMLView;
class Button;
-

== Includes ==
-
#include "SFML/Window.hpp"
#include "SFML/Graphics.hpp"
#include "Brick.hpp"
#include "EventHandler.hpp"
#include "SFMLLevelView.hpp"
-

== Include guard ==
-
#ifndef EDITOR_H
#define EDITOR_H

Includes.

Forward declarations.

The class.

#endif
-

== @Editor.hpp ==
Include guard.
